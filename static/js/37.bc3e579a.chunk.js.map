{"version":3,"file":"static/js/37.bc3e579a.chunk.js","mappings":"uQAGaA,GAAeC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,qLAUZE,EAAOF,EAAAA,EAAAA,EAAH,kIAQJG,GAAQH,EAAAA,EAAAA,GAAOI,EAAAA,GAAPJ,CAAH,wIAOLK,EAAgBL,EAAAA,EAAAA,MAAH,wFAMbM,EAAiBN,EAAAA,EAAAA,OAAH,2PAYdO,EAAmBP,EAAAA,EAAAA,EAAH,+F,SCxCd,SAASQ,IACtB,OAA2CC,EAAAA,EAAAA,MAA3C,eAAOC,EAAP,YAAmBC,EAAnB,EAAmBA,UAAWC,EAA9B,EAA8BA,QAQxBC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAAaG,WACnBC,MAAOJ,EAAAA,KAAaI,QAAQD,WAC5BE,SAAUL,EAAAA,KAAaM,IAAI,GAAGH,aAQ1BI,EAAY,SAAC,GAAc,IAAZL,EAAW,EAAXA,KACnB,OAAO,SAAC,KAAD,CAAcA,KAAMA,EAAMM,OAAQ,SAAAC,GAAO,OAAI,SAAChB,EAAD,UAAmBgB,QAGzE,OACE,iCACA,SAACrB,EAAD,mCACGS,GAAaa,EAAAA,GAAAA,QAAc,cAAe,SAAC,KAAD,IAC1CZ,GAAWY,EAAAA,GAAAA,MAAY,iCACtB,SAAC,KAAD,KAEF,SAAC,KAAD,CACEC,cA7BuB,CAC3BT,KAAM,GACNE,MAAO,GACPC,SAAU,IA2BNO,SAlBe,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAC9BlB,EAASiB,GACTC,KAiBIC,iBAAkBhB,EAHpB,UAKE,UAACd,EAAD,CAAc+B,aAAa,MAA3B,WACE,SAACzB,EAAD,CAAe0B,QAAQ,OAAvB,mBACA,SAAC5B,EAAD,CAAOa,KAAK,OAAOgB,KAAK,OAAOC,YAAY,qBAC3C,SAACZ,EAAD,CAAWL,KAAK,UAChB,SAACX,EAAD,CAAe0B,QAAQ,QAAvB,oBACA,SAAC5B,EAAD,CAAOa,KAAK,QAAQgB,KAAK,QAAQC,YAAY,uBAC7C,SAACZ,EAAD,CAAWL,KAAK,WAChB,SAACX,EAAD,CAAe0B,QAAQ,WAAvB,uBACA,SAAC5B,EAAD,CAAOa,KAAK,WAAWgB,KAAK,WAAWC,YAAY,yBACnD,SAACZ,EAAD,CAAWL,KAAK,cAChB,SAACV,EAAD,CAAgB0B,KAAK,SAArB","sources":["page/RegistrationPage/RegistrationPage.Styled.jsx","page/RegistrationPage/RegistrationPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const RegisterForm = styled(Form)`\n  margin: 0 auto 15px;\n  padding: 15px;\n  border: 1px solid #565b9f;\n  border-radius: 4px;\n  display: flex;\n  flex-direction: column;\n  width: 320px;\n`;\n\nexport const Text = styled.p`\n  font-size: 34px;\n  margin-top: 100px;\n  margin-bottom: 40px;\n  font-weight: 700;\n  color: #565b9f;\n`;\n\nexport const Input = styled(Field)`\n  height: 25px;\n  margin-bottom: 4px;\n  padding: 4px;\n  font: 1.2em 'Fira Sans', serif;\n  font-size: 14px;\n`;\nexport const RegisterLable = styled.label`\n  text-align: start;\n  margin-bottom: 4px;\n  color: #565b9f;\n`;\n\nexport const RegisterButton = styled.button`\n  margin: 10px auto ;\n  font: 1.2em 'Fira Sans', serif;\n  height: 40px;\n  width: 200px;\n  border: 0px solid #565b9f;\n  border-radius: 4px;\n  color: #565b9f;\n  box-shadow: 0 4px 4px rgb(0 0 0 / 15%);\n  cursor: pointer;\n`;\n\nexport const ErrorMessageText = styled.p`\n  margin: 2px;\n  text-align: end;\n  color: red;\n  font-size: 15px;\n`;\n","import { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { useRegisterMutation } from 'redux/authOperation';\nimport toast, { Toaster } from 'react-hot-toast';\nimport { RegisterForm, Text, Input, RegisterLable, RegisterButton, ErrorMessageText } from './RegistrationPage.Styled';\n\nexport default function RegisterPage() {\n  const [register, { isSuccess, isError }] = useRegisterMutation();\n\n  const defaultInitialValues = {\n    name: '',\n    email: '',\n    password: '',\n  };\n\n  const schema = yup.object().shape({\n    name: yup.string().required(),\n    email: yup.string().email().required(),\n    password: yup.string().min(8).required(),\n  });\n\n  const handleSubmit = (values, { resetForm }) => {\n    register(values);\n    resetForm();\n  };\n\n  const FormError = ({ name }) => {\n    return <ErrorMessage name={name} render={message => <ErrorMessageText>{message}</ErrorMessageText>} />;\n  };\n\n  return (\n    <>\n    <Text>Create your account!</Text>\n      {isSuccess && toast.success('Success!') && <Toaster />}\n      {isError && toast.error('Something wrong, try again!') && (\n        <Toaster />\n      )}\n      <Formik\n        initialValues={defaultInitialValues}\n        onSubmit={handleSubmit}\n        validationSchema={schema}\n      >\n        <RegisterForm autoComplete=\"off\">\n          <RegisterLable htmlFor=\"name\">Name</RegisterLable>\n          <Input name=\"name\" type=\"text\" placeholder=\"Enter your name\" />\n          <FormError name=\"name\" />\n          <RegisterLable htmlFor=\"email\">Email</RegisterLable>\n          <Input name=\"email\" type=\"email\" placeholder=\"Enter your e-mail\" />\n          <FormError name=\"email\" />\n          <RegisterLable htmlFor=\"password\">Password</RegisterLable>\n          <Input name=\"password\" type=\"password\" placeholder=\"Enter your password\" />\n          <FormError name=\"password\" />\n          <RegisterButton type=\"submit\"> Create!</RegisterButton>\n        </RegisterForm>\n      </Formik>\n    </>\n  );\n}"],"names":["RegisterForm","styled","Form","Text","Input","Field","RegisterLable","RegisterButton","ErrorMessageText","RegisterPage","useRegisterMutation","register","isSuccess","isError","schema","yup","shape","name","required","email","password","min","FormError","render","message","toast","initialValues","onSubmit","values","resetForm","validationSchema","autoComplete","htmlFor","type","placeholder"],"sourceRoot":""}